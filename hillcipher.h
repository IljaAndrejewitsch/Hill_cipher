//
// Описание необходимых для реализации шифра функций
//

#pragma once
#include <string>

typedef unsigned int uint;
const double precision = 1E-15;

using std::string;

// Параметры:
//     str - исходная строка,
//     key – ключ,
//     size – порядок матрицы,
//	   mode - 1 для шифрования, 0 для дешифрования.
// Результат:
//     Преобразованный подобающим образом текст.
string crypt_text(const string str, const string key, bool mode);

// Параметры:
//     str - исходная строка,
//     key – ключ.
// Результат:
//     Слово, полученное после умножения исходного слова на ключ.
string crypt_word(const string str, int const* const* key);

// Освобождение памяти, занимаемой двумерным массивом.
// Параметры:
//     m – указатель на начало массива,
//     size – порядок матрицы.
void delete_matrix(int**& m, const uint size);

// Вычисление определителя матрицы.
// Параметры:
//     m – указатель на начало массива- матрицы,
//     sizeMatrix – порядок матрицы.
// Возвращаемое значение:
//	   Число - определитель матрицы.
int determinant(int const* const* m, uint sizeMatrix);

// Реализует расширенный алгоритм Евклида.
// Параметры:
//     a, b – числа, НОД которых ищем,
//	   x, y - коэффициенты разложения.
// Возвращаемое значение:
//	   НОД a и b, а также коэффициенты, с помощью которых НОД двух чисел выражается через сами эти числа,
//	   т.е. a * x + b * y = НОД(a, b).
int gcd(int a, int b, int& x, int& y);

// Создает минор матрицы - подматрицу без заданных строки и столбца исходной матрицы.
// Параметры:
//     m – указатель на начало массива - исходной матрицы,
//	   Minor - указатель на начало массива - минора,
//	   i, j - удаляемые строка и столбец соответсвенно,
//     sizeMatrix – порядок исходной матрицы.
// Результат:
//	   Минор матрицы.
void getMinor(int const* const* m, int**& Minor, uint i, uint j, uint sizeMatrix);

// Возвращает матрицу алгебраических дополнений заданной матрицы.
// Параметры:
//     m – указатель на начало массива- матрицы,
//     sizeMatrix – порядок матрицы.
// Возвращаемое значение:
//	   Матрица алгебраических дополнений.
int** AMatrix(int const* const* m, uint sizeMatrix);

// Транспонирует матрицу.
// Параметры:
//     m – указатель на начало массива- матрицы,
//     sizeMatrix – порядок матрицы.
// Возвращаемое значение:
//	   Транспонированная матрица.
int** transMatrix(int const* const* m, uint sizeMatrix);